;; ***************************************************************************
;;
;;  Title:      generalRoutines.dbl
;;
;;  Type:       Method
;;
;;  Description:Central location of methods for ISAMUtils application
;;
;;  Author:     Synergy/DE Developer Support
;;
;;  Copyright:  ©Synergex International Inc.  All rights reserved.
;;
;;  WARNING:    If you were given this code by a Synergex employee then you may
;;              use and modify it freely to generate code for your applications.
;;              However, you may not under any circumstances distribute this
;;              code, or any modified version of this code, to any third party
;;              without first obtaining written permission to do so from
;;              Synergex.  In using this code you accept that it is provided
;;              as is, and without support or warranty.  Neither Synergex or the
;;              author accept any responsibility for any losses or damages of
;;              any nature which may arise from the use of this code.  This
;;              header information must remain, unaltered in the code at all
;;              times.  Possession of this code, or any modified version of this
;;              code, indicates your acceptance of these terms.
;;
;; ***************************************************************************
import System
import System.Collections.Generic
import System.Text
import System.ComponentModel
import System.Data
import System.Windows.Forms
import System.Drawing
import System.IO
import System.Diagnostics

namespace ISAMUtils

	public class generalRoutines

;;;***********************************************************************************
;;; About Box - dlk
;;;***********************************************************************************
		public static method AboutBox			,Void
			endparams
		proc
			try
			begin
				data about						,@AboutBox		,new AboutBox()
				about.ShowDialog()
			end
			
			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod

;;;***********************************************************************************
;;; Clear Panel Control Method
;;; passedCtrl - panel to be cleared
;;; cbox - check box associated with the panel
;;;***********************************************************************************
		public static method clearPanel			,Void
			byval passedCtrl					,@Control
			byval cbox							,@CheckBox
			endparams	
		proc
			try
			begin
				passedCtrl.Enabled = cbox.Checked
				if (!cbox.Checked)
				begin
					data passedCtrl				,@System.Collections.IEnumerator
					passedCtrl = passedCtrl.Controls.GetEnumerator()
					while (passedCtrl.MoveNext())
					begin
						data ctrl				,@Control		,((Control)(passedCtrl.Current))
						
						if (ctrl .is. CheckBox)
						begin
							data cb				,@CheckBox		,((CheckBox)(ctrl))
							cb.Checked = false
						end
						
						if (ctrl .is. RadioButton)
						begin
							data rb				,@RadioButton	,((RadioButton)(ctrl))
							rb.Checked = false
						end
						
						if (ctrl .is. TextBox)
						begin
							data tbox			,@TextBox		,((TextBox)(ctrl))
							tbox.Text = System.String.Empty
						end
						
						if (ctrl .is. ComboBox)
						begin
							data combox			,@ComboBox		,((ComboBox)(ctrl))
							combox.SelectedIndex = 0
						end
					end
				end
			end
			
			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod

;;;***********************************************************************************
;;; Clear Tab Method
;;; passedTab - the selected tab when this method was called
;;;***********************************************************************************
		public static method clearTab			,Void
			byval passedTab						,@Control
			endparams
		proc
			try
			begin
				data ctrl						,@Control
				data ctrl2						,@Control
				foreach ctrl in passedTab.Controls
				begin
					foreach ctrl2 in ctrl.controls
					begin
						;;checks to see if ctrl2 is a sepcific type of control
						if (ctrl2 .is. CheckBox)
						begin
							((CheckBox)ctrl2).checked=false
						end
						;;if the control is a panel, it needs to be recursive
						if (ctrl2 .is. Panel)
						begin
							data foo			,@Control
							foreach foo in ctrl2.Controls
							begin
								clearTab(foo)
							end						
						end
						
						if (ctrl2 .is. TextBox)
						begin
							((TextBox)ctrl2).Text=""
						end
						
						if (ctrl2 .is. ComboBox)
						begin
							((ComboBox)ctrl2).SelectedIndex = 0
						end 
						
					end					
				end
			end
			
			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod

;;;***********************************************************************************
;;; Command Line String
;;;***********************************************************************************
		public static ISAMCommandString			,@StringBuilder

;;;***********************************************************************************
;;; Directory Browse Button Method
;;; tb - textBox where the directory info will be placed
;;;***********************************************************************************
		public static method dirBrowseBtn		,Void
			byval tb							,@TextBox
			endparams
			
			record
				browseFolder					,@FolderBrowserDialog
			endrecord
		proc
			try
			begin
				browseFolder = new FolderBrowserDialog()
				browseFolder.SelectedPath = (string) "C:\"
				if (browseFolder.ShowDialog() == DialogResult.OK)
				begin
					tb.Text = browseFolder.SelectedPath.ToString()
				end
			end
			
			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod

;;;***********************************************************************************
;;; Exit Button Method - dlk
;;;***********************************************************************************
		public static method exitBtn			,Void
		proc
			begin
				Application.Exit()
			end
		endmethod

;;;***********************************************************************************
;;; File Browse Button Method
;;; tb - textBox where the file info will be placed
;;; fi - the passed file index to determine what filter to be used
;;;***********************************************************************************
		public static method fileBrowseBtn		,Void
			byval tb							,@TextBox
			byval fi							,int
			endparams

			record
				browseFile						,@OpenFileDialog
				chan							,int
				ISAMFilter						,String			,"ISAM File|*.ism|All (*.*)|*.*"
				LogFilter						,String			,"Log File|*.log|All (*.*)|*.*"
				AllFilter						,String			,"All (*.*)|*.*"
				passedFilter					,String
			endrecord
		proc
			try
			begin
				using fi select
				(1), passedFilter=ISAMFilter
				(2), passedFilter=LogFilter
				(3), passedFilter=AllFilter
				endusing

				browseFile = new OpenFileDialog()
				browseFile.InitialDirectory = (string)"C:\"
				browseFile.Filter=(passedFilter)
				browseFile.FilterIndex = 1
				browseFile.CheckFileExists = false

				begin
					if (browseFile.ShowDialog() == DialogResult.OK) then
					begin
						tb.Text = browseFile.FileName.ToString()
					end
					else
						tb.Text = ""
				end
			end

			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
			mreturn
		endmethod
	

	






;;;************************************************************************************
;;; method to build up a command line -- SCL
;;;************************************************************************************
		public static method bldCmdLine, @List<string>
			ctrl,	@Control
			endparams

			record
				info	,@list<string>
				elem	,@Control
			endrecord
		proc
			try
			begin
			;;create your new list
			info = new List<String>()

			;;cylce through your list to find the controls
			foreach elem in ctrl.controls
			begin
				;;if the control is a checkbox and is checked
				if(elem .is. CheckBox && ((CheckBox)elem).Checked)
				begin
					;;add the tag information to the string
					info.Add((string)elem.Tag)
				end
				;;if the control is a combobox and enabled
				if(elem .is. ComboBox && ((ComboBox)elem).Enabled) 
				begin
					;;add the selected item to the string
					info.Add((string)elem.Tag)
					;info.Add((string)((combobox)elem).SelectedItem)
				end
				;;if the control is a texbox and enabled
				if(elem .is. TextBox && ((TextBox)elem).Enabled)
				begin
					;;add the text to the string
					if(elem.Name == "tboxISUTLReloadDensity") then
					begin
						info.add(((TextBox)elem).Text)
					end
					else
					begin
						info.Add(" """+((TextBox)elem).text+""" ")
					end
				end
				if(elem .is. RadioButton && ((RadioButton)elem).Checked)
				begin
					;;add the tag to the string
					info.add((string)elem.Tag)
				end
				;;if the contol is a panel
				if elem .is. panel
				begin
					;;call bldCmdLine method recursilvely to cycle through inner
					;;controls. addrange builds a string and adds string to top
					;;loop string.
					info.addrange(bldCmdLine(elem))
				end
				end
			end

			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
			;;return your built command line
			mreturn info
		endmethod

;;;************************************************************************************
;;; method to create log file if selected -- SCL
;;;************************************************************************************
		public static method createLogFile,	void
			byval logout,	@string
			endparams

			record
				log_chan		,i4
				log_file		,a255	
				cur_dir			,a255
				length			,d3
				sw				,@streamwriter
				errDate			,a16
			endrecord
		proc
			try
			begin
				log_chan = %syn_freechn

				;;get the current directory
				cur_dir = %syn_getdir
				errDate = %datetime
				log_file = atrim(cur_dir)+"\isamutl_"+  errDate + ".log"
								
				repeat
				begin
					;;check to see if the log file exist
					open(log_chan, U, log_file,LOCK:Q_NO_LOCK) [err=nofile]
					exitloop
					nofile,
					;;if it doesnt exist create the log file
					begin
						open(log_chan, o, log_file)
						close log_chan
					end
				end
				
				close log_chan
				;;clear the contents of the file by overwriting the original file
				open(log_chan, o, log_file)
								
				;;write to isamutl_%datetime.log
				writes(log_chan, logout)		
				close log_chan	
			end 

			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod

;;;************************************************************************************
;;; method to determine the current tab page -- JTF
;;;************************************************************************************
		public static method FindSelectedTabPage, @TabPage
			byval controls, @Control.ControlCollection
			endparams
		proc
			try
			begin
				data activeTabPage		,@TabPage 
				data m_it1, @System.Collections.IEnumerator
				m_it1 = controls.GetEnumerator()
				while ( m_it1.MoveNext())
				begin
					begin
						data ct, @Control , ((Control)(m_it1.Current))							
						if (ct .is. TabControl)
						begin
							data tmpPage, @TabPage 
							tmpPage = FindSelectedTabPage(((TabControl)(ct)).SelectedTab.Controls)
							if ! (tmpPage == ^NULL) then
							begin
								activeTabPage = tmpPage
							end								
							else
							begin
								activeTabPage = ((TabControl)(ct)).SelectedTab
							end
						end
					end
					
				end
				mreturn activeTabPage
			end

			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod

;;;************************************************************************************
;;; method to call when an error is caught -- JTF
;;; display error message and writes contents to file
;;;************************************************************************************
		public static method catch_code,Void
			in	errmessage				,string
			in appname					,string
			endparams

			record
				errDate					,a16
			endrecord
		proc
			begin
				data currentline		,string
				data currentmethod		,string
				data currentline1		,string
				data currentmethod1		,string
				data callstack			,string
				data currentinfo		,string
				data message			,string
				data errfilespec		,string
				data MethodName			,@StackTrace
				data f					,@StackFrame
				data firstroutine		,boolean
				
				MethodName = new StackTrace(0,true)
				
				callstack = ".NET error call stack: " + Environment.NewLine + Environment.NewLine
				foreach f in MethodName.GetFrames()
				begin
					if (firstroutine==false)
					begin
						currentline1	= f.GetFileLineNumber().ToString()
						currentmethod1	= f.GetMethod().ToString()
					end
					firstroutine=true
					
					currentline		= f.GetFileLineNumber().ToString()
					currentmethod	= f.GetMethod().ToString()
					currentinfo		= f.GetMethod().ToString() +
&					" at line: " + f.GetFileLineNumber().ToString() + Environment.NewLine
					
					callstack		= callstack + currentinfo
				end
				
				message = "Error in routine: " + currentmethod1 +
&				" at line " + currentline1 + Environment.NewLine + Environment.NewLine +
&				"Synergy error information:" + Environment.NewLine + Environment.NewLine +
&				errmessage + Environment.NewLine + Environment.NewLine +
&				callstack
				
				Messagebox.Show(message,appname+ " ERROR!")
				
				errfilespec=%syn_getdir
				errDate = %datetime
				errfilespec=errfilespec + "\Error_" + errDate + ".txt"
				
				System.IO.File.WriteAllText(errfilespec, message)
				
				Messagebox.Show("File:" + Environment.NewLine + Environment.NewLine + errfilespec +
&				Environment.NewLine + Environment.NewLine + "created with error details")
			end
		endmethod

;;;************************************************************************************
;;; method to call when validating a field -- JTF
;;;************************************************************************************
		public static method validatefield,	void
		a_checkboxval				,string
		a_checkbox					,@Checkbox
		a_field						,@control
		endparams

		record
			message			,string
			caption			,string
			rtn				,DialogResult
		endrecord
		proc
			message = "When " + a_checkboxval + " checkbox is selected data must be entered into the corresponding field" +
&						Environment.NewLine + Environment.NewLine +
&						"Would you like to uncheck the " + a_checkboxval + " checkbox?"
			caption	=  "Field input required when checkbox selected!"
			
			if a_field .is. Textbox then
			begin
				if ((Textbox)a_field).Text=="" 
				begin
					call displaymessage
				end	
			end
			else if a_field .is. Combobox then
			begin
				if ((Combobox)a_field).selectedindex<=0	 
				begin
					call displaymessage
				end	
			end
			else if a_field .is. Panel then
			begin
				begin
				data rb		,@control
				foreach rb in a_field.controls as @radiobutton
				begin
					if ((radiobutton)rb).Checked
						mreturn
					end
				end
				call displaymessage
			end
			else
			begin
				messagebox.show("Unreconized control")
			end
			mreturn 

		displaymessage,
			rtn = Messagebox.Show(message,caption,MessageBoxButtons.YesNo,MessageBoxIcon.Question)
			if rtn == DialogResult.Yes then
			begin
				a_checkbox.checked=false
			end
			else
			begin
				a_field.Focus()
			end
			return
		endmethod

;;;***********************************************************************************
;;; Numeric Only Method
;;; enteredText - e.KeyChar.ToString()
;;;***********************************************************************************
		public static method numericOnly		,Boolean
			byval enteredText					,@String
			endparams
		proc
			try
			begin
				data i							,int
				data rst						,Boolean
				data result						,double
				
				rst = double.TryParse(enteredText, result )
				if (!rst)
				begin
					mreturn false				
				end
				mreturn	true
			end
			
			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
		endmethod
		
;;;************************************************************************************
;;; user control options processor
;;;************************************************************************************
		public static method MakeArgs, String
			baseArgs							,String
			options								,@List<string>
			endparams
			
			record
				sb								,@StringBuilder
				elm								,String
			endrecord
		proc
			try
			begin
				sb = new StringBuilder()
				sb.Append(baseArgs)
				foreach elm in options
				begin
					sb.Append(elm)
				end
			end
			
			catch(synerr)
			begin
				generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
			end
			endtry
			mreturn sb.ToString()
		endmethod
	endclass
endnamespace

;;;************************************************************************************
;;; Try / Catch Template -- JTF
;;;************************************************************************************
.ifdef TRYCATCH_CODE
	try
	begin
		;>>>>>>>>>>>>>>>>>>>>>>>>>>>TO_DO place code to TRY here<<<<<<<<<<<<<<<<<<<<<<<<<<<
	end
catch(synerr)
	begin
	generalRoutines.catch_code(synerr.ToString(),synerr.source.ToString())
	end
	endtry
.endc